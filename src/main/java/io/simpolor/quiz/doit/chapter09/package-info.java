package io.simpolor.quiz.doit.chapter09;

/***
 * 리스트
 *
 * 선형 리스트
 * - 데이터를 순서대로 나열한 자료구조 입니다.
 * - 선형리스트(linear list)는 연결리스트(kinked list)라고도 부릅니다.
 * - 순차대로 전달할 수 밖에 없습니다.
 * - 선형 리스트에서 데이터는 노드(node) 또는 요소(element)라고 부릅니다. 각 노드는 데이터의 다음 노드를 카리키는 포인터를 갖습니다.
 * - 처음과 끝에 읶는 노드를 각각 머리 노드, 꼬리 노드라고 부릅니다.
 * - 선형 리시트는 쌓이는 데이터의 크기를 미리 알아야합니다.
 * - 데이터 삽입, 삭제시 모두를 옳겨야하기 때문에 효율이 좆지 않습니다.
 *
 * Node<E>는 제네릭으로 구현되므로 데이터 형 E는 임의의 클래스형이 허용됩니다.
 *
 *
 * 커서로 연결 리스트 만들기
 * - 각 노드를 배열 안의 요소에 저장하고 그 요소를 이용해 연결 리스트를 구현하는 방법
 * - 연결 리스트는 삽입, 삭제를 수행할 때마다 노드용 객체를 위한 메모리 영역을 만들고 해제하는 과정이 필요
 * - 데이터 수가 크게 바뀌지 않고 데이터 수의 최댓값을 미리 할 수 있다면 효율적으로 연결 리스트를 운용할 수 있음
 * - 포인터 역할을 하는 인덱스를 커서(cursor)라고 합니다.
 *
 *
 * 원형 이중 연결 리스트
 * - 연결 리스트의 꼬리 노드가 머리 노드를 가리키면 원형 리스트라고 합니다.
 * - 원형 리스트와 연결 리스트의 차이점은 꼬리 노드의 다음 노드를 가리키는 포인트가 null이 아니라
 *   머리 노드의 포인터의 값이라는 점입니다.
 * - 연결 리스트의 가장 큰 단점은 다음 노드를 찾기 쉽지만 앞쪽의 노드를 찾을 수 없습니다.
 * - 이점을 개선한 부분이 원형 이중 연결 리스트입니다. ( 앞/뒤 head를 가지게 됩니다. )
 */