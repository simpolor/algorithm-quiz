package io.simpolor.quiz.doit.chapter11;

/***
 * 해시법
 * - 검색과 더불어 데이터의 추가와 삭제를 효율적으로 수행할 수 있는 방법
 * - 데이터를 저장할 위치(인덱스)를 간단한 연산으로 구하는 것
 * - 검색 뿐 아니라, 추가, 삭제도 효율적으로 수행할 수 있습니다.
 * - 해시는 해시 키와, 해시 값을 가집니다.
 * - 해시 키와 값을 가지고 해시를 만드를 과정을 해시 함수(hash01 fuction)이라고 합니다.
 * - 해시 테이블의 각 요소를 버킷(bucket)이라고 합니다.
 * - 버킷이 충돌할 때는 덮어쓰거나 다른 해시 키를 검색하여 해당 값을 넣는다.
 *
 *
 * 체인법
 * - 같은 패시 값을 갖는 데이터를 쇠사슬(chain) 모양으로 연결 리스트에서 연결하는 방법
 * - 오픈 해시법(open hashing)이라고도 함
 * - 각 버킷을 저장하는 값은 그 인덱스를 해시 값으로 하는 연결 리스트의 첫번째 노드에 대한 참조
 *
 *
 * 해시와 해시 함수
 * - 복잡도는 낮아지나, 메모리를 쓸데없지 많이 차지 하므로, 시간과 공간의 절충(trade-off)이라는 문제가 발생
 * - 해시 테이블의 크기는 소수가 좋다고 알려져 있음
 * - 실수를 키 값에 대해 비트 연산하는 방법, 키 값에 대한 각 문자 코드에 곱셒과 덧셈을 하는 방법이 있음
 *
 *
 * dump 메서드
 * - 해시 테이블의 내용을 통째로 출력하느 메섣,
 *
 * 열거 ( enum )
 * - 대화형 메뉴로 표시하고 선태가는 일을 수행합니다.
 *
 *
 *
 *
 */